Description
===========

This project improves the sash shell with two commands -echo
and -jsonast that evaluates arithmetic expressions and generates
the AST of the expressions as a json value.


C++ syntactic tree of arithmetic expressions.
=============================================

The classical erroneous cases of evaluation are:

* Divide by zero: It triggers an exception of type "divide_by_zero".
* Operator precedence: Handle by the definition of the grammar.

We represent the AST with the help of Boost.Variant. See ast.hpp.

Grammar
=======

Boost.Spirit is a LL parser and the intuitive definition of arithmetic grammar are left-recursive.
We can transform the grammar quite easily to be right-recursive but the operator precedence becomes
right-associative which is a problem.

According to http://en.wikipedia.org/wiki/Left_recursion, we have three solutions:

(a) rewrite the grammar to be left recursive.
(b) rewrite the grammar with more nonterminals to force the correct precedence/associativity.
(c) if using YACC or Bison, there are operator declarations, %left, %right and %nonassoc, which
    tell the parser generator which associativity to force.

Obviously (a) is impossible and (c) would impose us the rewrite everything in Yacc/Bison.

The Boost.Spirit tutorial uses the solution (b), the problem remaining is that these examples don't 
speak about AST generation but instead calculate in place the solution of the arithmetic expression,
which is not what we want.

We finally manage to get it work by using inherited attribute and lazy statment thanks to Boost.Phoenix.
Please see parser.tcc for the grammar definition.

Also note that the AST is nearly automatically generated because Boost.Spirit can match the rule and the
type of the rule (under certain conditions, for example the type must be adapted by Boost.Fusion first, 
see ast.hpp).


New features
============

(1) Support the parsing of arithmetic expressions:

* Unary operator -
* Binary operator *, +, -, /
* Parenthesis
* Alternative: if 0 then 1 else if 1 then 3 else 5

(2) A jsonifier of arithmetic expression (as described in (1))
> -jsonast "1*2-4"

{
        "left" : 
        {
                "left" : 1,
                "op" : "mul",
                "right" : 2
        },
        "op" : "sub",
        "right" : 4
}

(3) Calculation of arithmetic expression (as described in (1))

> -echo $[if 0 then 1-5*2 else 2*4]
8
> -echo $[if 1 then 1-5*2 else 2*4]
-9

(4) Correct expansion of environment variable.

> -echo $[if 1 then 1-5*$THREE else $THREE]
Empty environment variable 'THREE' inside arithmetic expression.
> setenv THREE 3
> -echo $[if 1 then 1-5*$THREE else $THREE]
-14
> -echo $[if 0 then 1-5*$THREE else $THREE]
3
> setenv THREE three
> -echo $[if 0 then 1-5*$THREE else $THREE]
Non-arithmetic variable inside arithmetic expression (THREE = three).


Dependencies
============
- Jsoncpp
- Boost 1.54
  (notes: All libraries used are header-only
          Not tested with Boost version less than 1.54, it might work).

How to install Boost 
====================

The source files can be downloaded from: 

http://www.boost.org/users/download/

Once the compressed file is decompressed. The following commands should be
executed:

- ./bootstrap.sh
- ./b2 install

How to install jsoncpp
======================

A version of jsoncpp that can be build with cmake is available at:

https://github.com/codebudo/jsoncpp

Then to install the library:

1. Install CMake in your system and make sure it is in your `$PATH` variable.
2. Open a new terminal an go to jsoncpp directory.
3. `make`
4. `sudo make install`

Acknowledgments
===============

* Thanks to the authors of Boost.Variant for their examples.
* Thanks to the authors of Boost.Spirit for their examples.
* Thanks to sehe for the help on Boost.Spirit: http://stackoverflow.com/questions/20079648/boostspirit-illegal-backtracking-exception
